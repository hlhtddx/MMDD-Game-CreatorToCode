
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN COLON COMMA FALSE FCONST FLOAT ICONST ID INT LBRACE LBRACKET LPAREN PERIOD RBRACE RBRACKET RPAREN SCONST SEMI STRING TRUE TYPEschema : schema typedef\n               | typedeftypedef : TYPE ID LBRACE properties RBRACEproperties : properties property\n                | propertyproperty : ID COLON type SEMI\n                | ID COLON type ASSIGN constant SEMI\n                | ID COMMA SCONST COLON type SEMI\n                | ID COMMA SCONST COLON type ASSIGN constant SEMIarray : type LBRACKET ICONST RBRACKET\n                | type LBRACKET ID RBRACKETtype : INT\n                | FLOAT\n                | STRING\n                | ID\n                | arrayconstant : ICONST\n                    | FCONST\n                    | SCONST\n                    | TRUE\n                    | FALSE'
    
_lr_action_items = {'COMMA':([7,],[11,]),'COLON':([7,20,],[10,24,]),'FLOAT':([10,24,],[15,15,]),'SCONST':([11,22,37,],[20,28,28,]),'RBRACKET':([25,26,],[34,35,]),'INT':([10,24,],[16,16,]),'ID':([2,6,8,9,10,13,21,23,24,36,38,40,],[5,7,-5,7,14,-4,25,-6,14,-7,-8,-9,]),'ICONST':([21,22,37,],[26,31,31,]),'LBRACKET':([14,15,16,17,18,19,33,34,35,],[-15,-13,-12,-16,21,-14,21,-11,-10,]),'RBRACE':([8,9,13,23,36,38,40,],[-5,12,-4,-6,-7,-8,-9,]),'SEMI':([14,15,16,17,18,19,27,28,29,30,31,32,33,34,35,39,],[-15,-13,-12,-16,23,-14,-21,-19,-20,36,-17,-18,38,-11,-10,40,]),'FCONST':([22,37,],[32,32,]),'TRUE':([22,37,],[29,29,]),'FALSE':([22,37,],[27,27,]),'ASSIGN':([14,15,16,17,18,19,33,34,35,],[-15,-13,-12,-16,22,-14,37,-11,-10,]),'TYPE':([0,1,3,4,12,],[2,2,-2,-1,-3,]),'STRING':([10,24,],[19,19,]),'LBRACE':([5,],[6,]),'$end':([1,3,4,12,],[0,-2,-1,-3,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'properties':([6,],[9,]),'array':([10,24,],[17,17,]),'schema':([0,],[1,]),'type':([10,24,],[18,33,]),'property':([6,9,],[8,13,]),'constant':([22,37,],[30,39,]),'typedef':([0,1,],[3,4,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> schema","S'",1,None,None,None),
  ('schema -> schema typedef','schema',2,'p_schema','SchemaParser.py',11),
  ('schema -> typedef','schema',1,'p_schema','SchemaParser.py',12),
  ('typedef -> TYPE ID LBRACE properties RBRACE','typedef',5,'p_typedef','SchemaParser.py',27),
  ('properties -> properties property','properties',2,'p_properties','SchemaParser.py',38),
  ('properties -> property','properties',1,'p_properties','SchemaParser.py',39),
  ('property -> ID COLON type SEMI','property',4,'p_property','SchemaParser.py',57),
  ('property -> ID COLON type ASSIGN constant SEMI','property',6,'p_property','SchemaParser.py',58),
  ('property -> ID COMMA SCONST COLON type SEMI','property',6,'p_property','SchemaParser.py',59),
  ('property -> ID COMMA SCONST COLON type ASSIGN constant SEMI','property',8,'p_property','SchemaParser.py',60),
  ('array -> type LBRACKET ICONST RBRACKET','array',4,'p_array','SchemaParser.py',90),
  ('array -> type LBRACKET ID RBRACKET','array',4,'p_array','SchemaParser.py',91),
  ('type -> INT','type',1,'p_type','SchemaParser.py',102),
  ('type -> FLOAT','type',1,'p_type','SchemaParser.py',103),
  ('type -> STRING','type',1,'p_type','SchemaParser.py',104),
  ('type -> ID','type',1,'p_type','SchemaParser.py',105),
  ('type -> array','type',1,'p_type','SchemaParser.py',106),
  ('constant -> ICONST','constant',1,'p_constant','SchemaParser.py',118),
  ('constant -> FCONST','constant',1,'p_constant','SchemaParser.py',119),
  ('constant -> SCONST','constant',1,'p_constant','SchemaParser.py',120),
  ('constant -> TRUE','constant',1,'p_constant','SchemaParser.py',121),
  ('constant -> FALSE','constant',1,'p_constant','SchemaParser.py',122),
]
